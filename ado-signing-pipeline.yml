# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

pr:
  branches:
    include: 
      - main

pool:
  vmImage: windows-latest

steps:

- task: EsrpCodeSigning@1
  inputs:
    ConnectedServiceName: 'ESRP Guardrails Accelerator Signing'
    FolderPath: './'
    Pattern: '*ps*'
    signConfigType: 'inlineSignParams'
    inlineOperation: |
        [{
            "KeyCode" : "CP-230012",
            "OperationCode" : "SigntoolSign",
            "Parameters" : {
                "OpusName" : "Microsoft",
                "OpusInfo" : "http://www.microsoft.com",
                "FileDigest" : "/fd \"SHA256\"",
                "PageHash" : "/NPH",
                "TimeStamp" : "/tr \"http://rfc3161.gtm.corp.microsoft.com/TSS/HttpTspServer\" /td sha256"
            },
            "ToolName" : "sign",
            "ToolVersion" : "1.0"
        },
        {
            "KeyCode" : "CP-230012",
            "OperationCode" : "SigntoolVerify",
            "Parameters" : {},
            "ToolName" : "sign",
            "ToolVersion" : "1.0"
        }]
    SessionTimeout: '60'
    MaxConcurrency: '50'
    MaxRetryAttempts: '5'
  enabled: true

#look for hash mismatch
- powershell: |
    $signatureStatuses = Get-ChildItem -r -i *.ps* | Get-AuthenticodeSignature

    Foreach ($signatureStatus in $signatureStatuses) {
      If ($signatureStatus.Status -eq 'HashMismatch') {
        throw "File '$($signatureStatus.Path)' has a hash status of '$($signatureStatus.status)'"
      }
      ElseIf ($signatureStatus.Status -eq 'NotSigned') {
        Write-Warning "File '$($signatureStatus.Path)' has a hash status of '$($signatureStatus.status)'"
      }
      ElseIf ($signatureStatus.Status -eq 'Valid') {
        Write-Host "File '$($signatureStatus.Path)' has a hash status of '$($signatureStatus.status)'"
      }
      Else {
        throw "File '$($signatureStatus.Path)' has an unhandled hash status of '$($signatureStatus.status)'"
      }
    }
  name: CheckForSignFailures

#test module imports
- powershell: |
    $ErrorActionPreference = 'Stop'

    $moduleFiles = Get-ChildItem -path ./* -recurse -include *.psm1
    Write-Host "Count of module files: $($moduleFiles.count)"
    
    try {
      ForEach ($moduleFile in $moduleFiles) {
        Import-Module $moduleFile.Fullname -ErrorAction Stop
      }
    }
    catch {
      throw "Failed test import module '$moduleFile' with error: $_"
    }

    $importedModules = Get-Module
    Write-Host "Imported modules: `n $($importedModules.Path | Out-String)"

    $missingModules = $moduleFiles | Where-object {$_ -inotin ($importedModules).Path} 
    If ($missingModules) {
      throw "The following modules failed import test: $missingModules"
    }
  name: TestModuleImports

- powershell: |
    Write-Host "Executing powershell script in '$pwd'"
    gci env: | FT -AutoSize
    #gci $env:BUILD_REPOSITORY_LOCALPATH`/src | FT -AutoSize
    
    $files = $env:GETFILESCHANGEDINPR_FILESCHANGEDINLASTPR.split(';')
    Write-Host "Total '$($files.count)' files changed in last commit. Files: `n $files"

    $moduleManifestFiles = $files | Where-Object {$_ -like '*.psm1'}
    Write-Host "'$($moduleManifestFiles.count)' module manifest files changed in last commit"

    try {
      $moduleManifestFilesObjs = @()

      ForEach ($file in $moduleManifestFiles) {
        $moduleManifestFilesObjs += Get-Item -Path $file -ErrorAction Stop
      }
    }
    catch {
      Write-Error "Failed to find file path '$file' with Get-Item -Path '$file'; Error: $_"
    }

    $zipsChanged = $false
    ForEach ($moduleManifest in $moduleManifestFilesObjs) {
        $moduleCodeFile = Get-Item -Path $moduleManifest.FullName.replace('psd1','psm1')
        
        If ($moduleManifestFilesObjs.FullName -icontains $moduleManifest.FullName -or $moduleManifestFilesObjs.FullName -icontains $moduleCodeFile.FullName) {
          Write-Host "Module '$($moduleManifest.BaseName)' was changed, zipping module files..."

          $destPath = "./psmodules/$($moduleManifest.BaseName).zip"
          Compress-Archive -Path "$($moduleManifest.Directory)/*" -DestinationPath $destPath -Update

          $zipsChanged = $true
        }
        Else {
            Write-Host "Neither the manifest '$($moduleManifest.FullName.toLower())' or script file '$($moduleCodeFile.FullName.ToLower())' for module '$($moduleManifest.BaseName)' was changed, skipping zipping..."
        }
    }

    # output whether modules were changed
    Write-Output ("##vso[task.setvariable variable=filesZipped;isOutput=true]$($moduleManifestFilesObjs.count -gt 0)")
  displayName: 'Zip signed modules'
  name: 'ZipFiles'
  enabled: false

- powershell: |
    Write-Host "Executing powershell script in '$pwd'"
    gci env: | FT -AutoSize
    #gci $env:BUILD_REPOSITORY_LOCALPATH`/src | FT -AutoSize
    

    $moduleManifestFilesObjs = Get-ChildItem -Path .\src -Recurse -Include *.psm1
    Write-Host "'$($moduleManifestFiles.count)' module manifest files "

    ForEach ($moduleManifest in $moduleManifestFilesObjs) {
        $moduleCodeFile = Get-Item -Path $moduleManifest.FullName.replace('psd1','psm1')
        
        If ($moduleManifestFilesObjs.FullName -icontains $moduleManifest.FullName -or $moduleManifestFilesObjs.FullName -icontains $moduleCodeFile.FullName) {
          Write-Host "Module '$($moduleManifest.BaseName)' found, zipping module files..."

          $destPath = "./psmodules/$($moduleManifest.BaseName).zip"
          Compress-Archive -Path "$($moduleManifest.Directory)/*" -DestinationPath $destPath -Force

        }
        Else {
            Write-Host "Neither the manifest '$($moduleManifest.FullName.toLower())' or script file '$($moduleCodeFile.FullName.ToLower())' for module '$($moduleManifest.BaseName)' was changed, skipping zipping..."
        }
    }

    # output whether modules were changed
    Write-Output ("##vso[task.setvariable variable=filesZipped;isOutput=true]$($true)")
  displayName: 'Zip signed modules'
  name: 'ZipAllFiles'
  enabled: true

- powershell: |
    $dest = "{0}/{1}.zip" -f $ENV:BUILD_ARTIFACTSTAGINGDIRECTORY,(get-date -f 'yyyy-MM-dd-HH-mm-ss')
    Compress-Archive -Path ./* -DestinationPath $ENV:BUILD_ARTIFACTSTAGINGDIRECTORY/$(get-date -f 'yyyy-MM-dd-HH-mm-ss').zip
  name: 'zipartifact'

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: '$(Build.ArtifactStagingDirectory)'
    ArtifactName: 'drop'
    publishLocation: 'Container'
